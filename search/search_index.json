{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Tools Collection This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will greatly simplify your workflow and enhance your productivity. With the NTools , you can effortlessly: - Backup your files and folders - Build your projects with ease - Perform Git operations seamlessly - Leverage powerful MSBuild tasks The installation process is straightforward, and the tools are highly reliable and efficient, ensuring the safety and integrity of your data. Take advantage of the NTools ' intuitive command-line interface to streamline your development process. From building solutions to running tests, creating staging builds, and exploring available options, the NTools provide a seamless experience for all your software development needs. Don't settle for mediocre tools when you can have the NTools at your disposal. Try them out today and witness the difference they can make in your development workflow. Enhancements are added weekly! Don't hesitate to write an issue if you have any questions or suggestions.","title":"Home"},{"location":"#software-tools-collection","text":"This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will greatly simplify your workflow and enhance your productivity. With the NTools , you can effortlessly: - Backup your files and folders - Build your projects with ease - Perform Git operations seamlessly - Leverage powerful MSBuild tasks The installation process is straightforward, and the tools are highly reliable and efficient, ensuring the safety and integrity of your data. Take advantage of the NTools ' intuitive command-line interface to streamline your development process. From building solutions to running tests, creating staging builds, and exploring available options, the NTools provide a seamless experience for all your software development needs. Don't settle for mediocre tools when you can have the NTools at your disposal. Try them out today and witness the difference they can make in your development workflow. Enhancements are added weekly! Don't hesitate to write an issue if you have any questions or suggestions.","title":"Software Tools Collection"},{"location":"additional-information/","text":"Additional Information There are several predefined MSBuild properties that can be used during builds. Here are a few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"Additional information"},{"location":"additional-information/#additional-information","text":"There are several predefined MSBuild properties that can be used during builds. Here are a few examples: $(MSBuildProjectFile) : The file name of the project file. $(MSBuildProjectName) : The file name of the project file without the extension. $(MSBuildProjectExtension) : The extension of the project file. $(MSBuildProjectFullPath) : The absolute path of the project file. $(MSBuildThisFileDirectory) : The directory of the MSBuild file that is currently being processed.","title":"Additional Information"},{"location":"changelog/","text":"","title":"Changelog"},{"location":"installation/","text":"Installation To get started with the NTools repository, follow these steps: Clone this repository to your local machine. Open a command prompt in administrative mode and navigate to the root folder of the repository. Change the PowerShell execution policy to allow the installation script to run. Run the following command: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process This command will allow the installation script to run. Once the installation is complete, the execution policy will revert to its original state. Run the following command to install the tools: install.bat This command will install the Dotnet Core Desktop runtime and download the NTools from GitHub. The tools will be installed in the C:\\Program Files\\Nbuild folder.","title":"Installation"},{"location":"installation/#installation","text":"To get started with the NTools repository, follow these steps: Clone this repository to your local machine. Open a command prompt in administrative mode and navigate to the root folder of the repository. Change the PowerShell execution policy to allow the installation script to run. Run the following command: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process This command will allow the installation script to run. Once the installation is complete, the execution policy will revert to its original state. Run the following command to install the tools: install.bat This command will install the Dotnet Core Desktop runtime and download the NTools from GitHub. The tools will be installed in the C:\\Program Files\\Nbuild folder.","title":"Installation"},{"location":"usage/","text":"Usage (examples) Open a Terminal and navigate to your solution folder. Build a solution: Nb.exe solution Clean a solution: Nb.exe clean Run tests on a solution: Nb.exe test Create a staging build: Nb.exe staging Display available options: Nb.exe -c targets","title":"Usage"},{"location":"usage/#usage-examples","text":"Open a Terminal and navigate to your solution folder. Build a solution: Nb.exe solution Clean a solution: Nb.exe clean Run tests on a solution: Nb.exe test Create a staging build: Nb.exe staging Display available options: Nb.exe -c targets","title":"Usage (examples)"},{"location":"ntools/nbackup/","text":"Nbackup Nbackup is a tool that leverages robocopy to backup a list of files and folders from a source to a destination. It is designed to be reliable and efficient, ensuring that your data is safe. Usage Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True)","title":"Nbackup"},{"location":"ntools/nbackup/#nbackup","text":"Nbackup is a tool that leverages robocopy to backup a list of files and folders from a source to a destination. It is designed to be reliable and efficient, ensuring that your data is safe.","title":"Nbackup"},{"location":"ntools/nbackup/#usage","text":"Nbackup.exe [-i value] [-e value] [-v value] [-performbackup value] - i : input json file which specifies source, destination and backup options. (string, default=) - e : Extract input json example file to current directory. (string, default=) - v : Verbose level (true or false, default=False) - performbackup : Set to false to verify json file without backup (true or false, default=True)","title":"Usage"},{"location":"ntools/nbuild/","text":"Nbuild Nbuild ( Nb ) is a tool that launches MSBuild with a target to build. Nb.exe is a command line tool that installs the development tools and runtimes required to build and test the solution. It is a wrapper for MSBuild and provides a simplified interface for building solutions. It also provides a way to define and run custom targets. To run a target type Nb.exe [Target Name] The list of targets is generated by running Nb.exe -c targets command. Expects: nbuild.targets file in the solution folder. common.targets file in $(ProgramFiles)\\Nbuild . More details on nbuild.targets and common.targets can be found at the end of this section. Generates: nbuild.bat used to run MSBuild to build any target defined in *.targets files. targets.md which lists all the targets defined in *.targets files. Usage Nb.exe [-c value] [-json value] [-v value] - c : Specifies the command to execute. Possible values: targets, install, uninstall, download, list. targets -> Lists available targets and saves them in the targets.md file. install -> Downloads and installs apps specified in the -json option. uninstall -> Uninstalls apps specified in the -json option. download -> Downloads apps specified in the -json option. list -> Lists apps specified in the -json option. ---- - By default, the -json option points to the `NTools` deployment folder: $(ProgramFiles)\\build\\tools.json. - The install, uninstall, and download commands require admin privileges to run. (string, default=) - json : Specifies the JSON file that holds the list of apps. Only valid for the install, download, and list commands. Sample JSON file: https://github.com/naz-hage/`NTools`/blob/main/Nbuild/resources/app-`NTools`.json (string, default=$(ProgramFiles)\\nbuild\\`NTools`.json) - v : Optional parameter which sets the console output verbose level ---- - if no command line options are specified with the -v option , i.e.: 'Nb.exe staging -v true` `Nb` will run an MSbuild target `staging` defined in a `nbuild.targets` file which present in the solution folder. Run `Nb.exe -t Targets` to list the available targets. -v Possible Values: (true or false, default=False) If the -json option is not specified, the default json file $(ProgramFiles)\\Nbuild\\ NTools .json is used if it exists . Examples Open a Terminal and navigate to your solution folder. Build a solution: Nb.exe solution Clean a solution: Nb.exe clean Run tests on a solution: Nb.exe test Create a staging build: Nb.exe staging Display available options: Nb.exe -c targets nbuild.targets nbuild.targets is a MSBuild file that imports common.targets . The following properties are required in nbuild.targets : SolutionName: The name of the solution file. <PropertyGroup> <!--The GUID should be replaced with the solution name--> <SolutionName></SolutionName> <DeploymentFolder>$(ProgramFiles)\\Nbuild</DeploymentFolder> </PropertyGroup> The following target is required in nbuild.targets : ARTIFACTS: The folder where the artifacts are copied to. <Target Name=\"ARTIFACTS\" DependsOnTargets=\"TAG\"> <!--The folder where the artifacts are copied to--> <ItemGroup> <BinaryFiles Include=\"$(Solut common.targets common.targets is imported by nbuild.targets . Common TARGETS: Target Name Description PROPERTIES Sets up properties for the build process, reads the Git tag, checks if essential properties are defined, and prints out some properties and git information. CLEAN Cleans the solution by removing the output directories and deleting the obj directories. STAGING Executes a series of targets for staging: CLEAN, TAG, AUTOTAG_STAGING, SOLUTION, TEST, SAVE_ARTIFACTS, PACKAGE. STAGING_DEPLOY Executes the STAGING target and then the DEPLOY target. PRODUCTION Executes a series of targets for production: CLEAN, TAG, PRODUCTION_DEPLOY Executes the PRODUCTION target and then the DEPLOY target. AUTOTAG_STAGING Sets the build type to STAGING. AUTOTAG_PRODUCTION Sets the build type to PRODUCTION and updates the main branch of the git repository. AUTOTAG_PRODUCTION Increments version for a production build, but only if the current branch is 'main' GIT_TAG Commits changes to the git repository, pulls the latest changes, pushes the changes, and creates a tag. AUTOTAG Gets the git branch, reads the build type, and automatically creates a tag based on the branch and build type. SOLUTION Builds the solution using the dotnet build command with the specified configuration, version, and culture. SOLUTION_MSBUILD Restores the solution's dependencies with dotnet restore and then builds the solution using MSBuild with the specified configuration, platform, version, and culture. PACKAGE Creates a zip file of the artifacts folder and then removes the artifacts folder. SAVE_ARTIFACTS Copies various types of files (binary files, EnUSFiles, ref, RunTimesLib, Default, RunTimesLibNet, RunTimesNetStandard20, RunTimesNative) to the artifacts folder. Deploy Checks if the user is an administrator and if the DeploymentFolder property is defined. If both conditions are met, it extracts the zip file of the artifacts folder to the deployment folder and then removes the setup folder. TEST Runs tests on the solution with the dotnet test command with the specified configuration and logger settings. TEST_RELEASE Similar to TEST, but uses the release configuration. SingleProject Demonstrate how to build a single projec. Builds a specific project ( nbuild\\nbuild.csproj ) using the dotnet build command with the specified configuration, runtime, version. IS_ADMIN Checks if the user is an administrator by running the net session command and sets the IsAdmin property based on the exit code. GIT_STATUS Displays the current git status AUTOTAG_STAGING Increments version for a staging build SET_TAG Sets version for a staging build GIT_PULL Pulls the latest changes from git TAG Gets the latest tag from git PUSH_TAG Pushes the current tag to the remote repository GIT_BRANCH Gets the current branch from git HandleError Prints a high importance message stating that an error occurred while reading the version file.","title":"Nbuild"},{"location":"ntools/nbuild/#nbuild","text":"Nbuild ( Nb ) is a tool that launches MSBuild with a target to build. Nb.exe is a command line tool that installs the development tools and runtimes required to build and test the solution. It is a wrapper for MSBuild and provides a simplified interface for building solutions. It also provides a way to define and run custom targets. To run a target type Nb.exe [Target Name] The list of targets is generated by running Nb.exe -c targets command. Expects: nbuild.targets file in the solution folder. common.targets file in $(ProgramFiles)\\Nbuild . More details on nbuild.targets and common.targets can be found at the end of this section. Generates: nbuild.bat used to run MSBuild to build any target defined in *.targets files. targets.md which lists all the targets defined in *.targets files.","title":"Nbuild"},{"location":"ntools/nbuild/#usage","text":"Nb.exe [-c value] [-json value] [-v value] - c : Specifies the command to execute. Possible values: targets, install, uninstall, download, list. targets -> Lists available targets and saves them in the targets.md file. install -> Downloads and installs apps specified in the -json option. uninstall -> Uninstalls apps specified in the -json option. download -> Downloads apps specified in the -json option. list -> Lists apps specified in the -json option. ---- - By default, the -json option points to the `NTools` deployment folder: $(ProgramFiles)\\build\\tools.json. - The install, uninstall, and download commands require admin privileges to run. (string, default=) - json : Specifies the JSON file that holds the list of apps. Only valid for the install, download, and list commands. Sample JSON file: https://github.com/naz-hage/`NTools`/blob/main/Nbuild/resources/app-`NTools`.json (string, default=$(ProgramFiles)\\nbuild\\`NTools`.json) - v : Optional parameter which sets the console output verbose level ---- - if no command line options are specified with the -v option , i.e.: 'Nb.exe staging -v true` `Nb` will run an MSbuild target `staging` defined in a `nbuild.targets` file which present in the solution folder. Run `Nb.exe -t Targets` to list the available targets. -v Possible Values: (true or false, default=False) If the -json option is not specified, the default json file $(ProgramFiles)\\Nbuild\\ NTools .json is used if it exists .","title":"Usage"},{"location":"ntools/nbuild/#examples","text":"Open a Terminal and navigate to your solution folder. Build a solution: Nb.exe solution Clean a solution: Nb.exe clean Run tests on a solution: Nb.exe test Create a staging build: Nb.exe staging Display available options: Nb.exe -c targets","title":"Examples"},{"location":"ntools/nbuild/#nbuildtargets","text":"nbuild.targets is a MSBuild file that imports common.targets . The following properties are required in nbuild.targets : SolutionName: The name of the solution file. <PropertyGroup> <!--The GUID should be replaced with the solution name--> <SolutionName></SolutionName> <DeploymentFolder>$(ProgramFiles)\\Nbuild</DeploymentFolder> </PropertyGroup> The following target is required in nbuild.targets : ARTIFACTS: The folder where the artifacts are copied to. <Target Name=\"ARTIFACTS\" DependsOnTargets=\"TAG\"> <!--The folder where the artifacts are copied to--> <ItemGroup> <BinaryFiles Include=\"$(Solut","title":"nbuild.targets"},{"location":"ntools/nbuild/#commontargets","text":"common.targets is imported by nbuild.targets . Common TARGETS: Target Name Description PROPERTIES Sets up properties for the build process, reads the Git tag, checks if essential properties are defined, and prints out some properties and git information. CLEAN Cleans the solution by removing the output directories and deleting the obj directories. STAGING Executes a series of targets for staging: CLEAN, TAG, AUTOTAG_STAGING, SOLUTION, TEST, SAVE_ARTIFACTS, PACKAGE. STAGING_DEPLOY Executes the STAGING target and then the DEPLOY target. PRODUCTION Executes a series of targets for production: CLEAN, TAG, PRODUCTION_DEPLOY Executes the PRODUCTION target and then the DEPLOY target. AUTOTAG_STAGING Sets the build type to STAGING. AUTOTAG_PRODUCTION Sets the build type to PRODUCTION and updates the main branch of the git repository. AUTOTAG_PRODUCTION Increments version for a production build, but only if the current branch is 'main' GIT_TAG Commits changes to the git repository, pulls the latest changes, pushes the changes, and creates a tag. AUTOTAG Gets the git branch, reads the build type, and automatically creates a tag based on the branch and build type. SOLUTION Builds the solution using the dotnet build command with the specified configuration, version, and culture. SOLUTION_MSBUILD Restores the solution's dependencies with dotnet restore and then builds the solution using MSBuild with the specified configuration, platform, version, and culture. PACKAGE Creates a zip file of the artifacts folder and then removes the artifacts folder. SAVE_ARTIFACTS Copies various types of files (binary files, EnUSFiles, ref, RunTimesLib, Default, RunTimesLibNet, RunTimesNetStandard20, RunTimesNative) to the artifacts folder. Deploy Checks if the user is an administrator and if the DeploymentFolder property is defined. If both conditions are met, it extracts the zip file of the artifacts folder to the deployment folder and then removes the setup folder. TEST Runs tests on the solution with the dotnet test command with the specified configuration and logger settings. TEST_RELEASE Similar to TEST, but uses the release configuration. SingleProject Demonstrate how to build a single projec. Builds a specific project ( nbuild\\nbuild.csproj ) using the dotnet build command with the specified configuration, runtime, version. IS_ADMIN Checks if the user is an administrator by running the net session command and sets the IsAdmin property based on the exit code. GIT_STATUS Displays the current git status AUTOTAG_STAGING Increments version for a staging build SET_TAG Sets version for a staging build GIT_PULL Pulls the latest changes from git TAG Gets the latest tag from git PUSH_TAG Pushes the current tag to the remote repository GIT_BRANCH Gets the current branch from git HandleError Prints a high importance message stating that an error occurred while reading the version file.","title":"common.targets"},{"location":"ntools/nbuildtasks/","text":"NbuildTasks NbuildTasks is a class library that exposes MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project. NbuildTasks defines a few additional Tasks that can be used during builds. Here are a few examples: <Target Name=\"TAG\"> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target> <Target Name=\"REDERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target> You can find the complete list of predefined MSBuild properties in the Microsoft documentation .","title":"NbuildTasks"},{"location":"ntools/nbuildtasks/#nbuildtasks","text":"NbuildTasks is a class library that exposes MSBuild tasks. It is used by Nbuild to perform various tasks such as web download and tools installation during the build of any project. NbuildTasks defines a few additional Tasks that can be used during builds. Here are a few examples: <Target Name=\"TAG\"> <GetTag Branch=\"$(Branch)\" BuildType=\"$(BuildType)\"> <Output TaskParameter=\"Tag\" PropertyName=\"Tag\" /> </GetTag> <Message Text=\"Tag: $(Tag)\" Importance=\"high\" /> </Target> <Target Name=\"REDERROR\"> <RedError Message=\"This is an error message displayed in Red\" /> </Target> You can find the complete list of predefined MSBuild properties in the Microsoft documentation .","title":"NbuildTasks"},{"location":"ntools/ngit/","text":"Ngit Ngit ( Ng ) is simple wrapper for Git tool that perform simple commands such as get tag and set tag. Usage Ng.exe [-c value] [-url value] [-tag value] [-buildtype value] [-v value] - c : git Command, value= [tag | settag| autotag| setautotag| deletetag | branch | clone] tag -> Get the current tag autotag -> Set next tag based on the build type: STAGING vs.PRODUCTION pushtag -> push specified tag in -tag option to remote repo settag -> Set specified tag in -tag option deletetag -> Delete specified tag in -tag option branch -> Get the current branch clone -> Clone specified Git repo in the -url option (string, default=) - url : Git repo path (string, default=) - tag : Tag used for -c settag and -c deletetag (string, default=) - buildtype : Build type used for -c autotag and -c setautotag Values: STAGING | PRODUCTION (string, default=) - v : verbose. value = [true | false] (true or false, default=False)","title":"Ngit"},{"location":"ntools/ngit/#ngit","text":"Ngit ( Ng ) is simple wrapper for Git tool that perform simple commands such as get tag and set tag.","title":"Ngit"},{"location":"ntools/ngit/#usage","text":"Ng.exe [-c value] [-url value] [-tag value] [-buildtype value] [-v value] - c : git Command, value= [tag | settag| autotag| setautotag| deletetag | branch | clone] tag -> Get the current tag autotag -> Set next tag based on the build type: STAGING vs.PRODUCTION pushtag -> push specified tag in -tag option to remote repo settag -> Set specified tag in -tag option deletetag -> Delete specified tag in -tag option branch -> Get the current branch clone -> Clone specified Git repo in the -url option (string, default=) - url : Git repo path (string, default=) - tag : Tag used for -c settag and -c deletetag (string, default=) - buildtype : Build type used for -c autotag and -c setautotag Values: STAGING | PRODUCTION (string, default=) - v : verbose. value = [true | false] (true or false, default=False)","title":"Usage"}]}