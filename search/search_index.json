{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Software Tools Collection This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will greatly simplify your workflow and enhance your productivity. With the NTools , you can effortlessly: - Backup your files and folders - Build your projects with ease - Perform Git operations seamlessly - Leverage powerful MSBuild tasks The installation process is straightforward, and the tools are highly reliable and efficient, ensuring the safety and integrity of your data. Take advantage of the NTools ' intuitive command-line interface to streamline your development process. From building solutions to running tests, creating staging builds, and exploring available options, the NTools provide a seamless experience for all your software development needs. Don't settle for mediocre tools when you can have the NTools at your disposal. Try them out today and witness the difference they can make in your development workflow. Enhancements are added weekly! Don't hesitate to write an issue if you have any questions or suggestions.","title":"About"},{"location":"#software-tools-collection","text":"This repository contains a collection of software tools specifically designed to automate various build and test tasks on Windows clients. Whether you are a developer working on your local machine or using GitHub Actions for continuous integration, these tools will greatly simplify your workflow and enhance your productivity. With the NTools , you can effortlessly: - Backup your files and folders - Build your projects with ease - Perform Git operations seamlessly - Leverage powerful MSBuild tasks The installation process is straightforward, and the tools are highly reliable and efficient, ensuring the safety and integrity of your data. Take advantage of the NTools ' intuitive command-line interface to streamline your development process. From building solutions to running tests, creating staging builds, and exploring available options, the NTools provide a seamless experience for all your software development needs. Don't settle for mediocre tools when you can have the NTools at your disposal. Try them out today and witness the difference they can make in your development workflow. Enhancements are added weekly! Don't hesitate to write an issue if you have any questions or suggestions.","title":"Software Tools Collection"},{"location":"changelog/","text":"Next Version 1.3.0 - 15-feb-24 Fix issue #29 Add default value for -json option Fix specifiying the process start info for ntools-launcher. if StartInfo.FileName uses executable name only that is in the system path, then the StartInfo.FileName witll be replaced with the full pathName. See FileMapping.cs file Add install.ps1 which is equivalent to install.bat. update to ntools-launcher 1.3.0 Version 1.2.0 - 22-jan-24 Fix issue #27 Update to ntools-launcher 1.2.0 Use $\"{Environment.GetFolderPath(Environment.SpecialFolder.System)}\" for c:\\windows\\system32 When Using ntools-launcher use default Process::StartInfo RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false, Version 1.2.0 - 22-jan-24 See issue#5 Add NbuildTask to download and install applications from the web. Add targets to install Git Nodejs VSCode VS2020 Postman Docker Desktop WSL Dotnet Core SDK Dotnet Core Runtime Add -i [list | download | install] and -json option to Nb.exe to download and install applications from the web. Use json input applist.json file to specify the applications to download and install. Sample json file: NbuildAppListTest Version 1.1.0 - 05-jan-24 Move Launcher project to its own public repo ntools-launcher . Publish Launcher 1.1.0 to nuget.org and unlist 1.0.0.5 Target .netstandard2.0 project to supprt MS build tasks. MS Build tasks only support .netstandard2.0. Add Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Refactor Launcher tests Introduce Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Add NbuildTasks project that exposes MS build tasks. Introduce Git Wrapper class to streamline git operations including: Git.GetTag Git.SetTag Git.Autotag Git.PushTag Git.DeleteTag Git.GetBranch Introduce Ngit project to provide a simplified and automated interface for git operations, renaming it to Ng.exe for convenience. Depends on DevDrive and MainDir environment variables. Default values are used if they don't exist. DevDrive defaults to C: and MainDir defaults to C:\\source . Use DevDrive and MainDir from environment variables if they exist. Otherwise, use default values. This applies to common.targets and NbuildTasks. Refactor Nbackup - remove cli options src, dest, and options and use json input only file instead. Update documentation Reference: issue#23 Next Delete non-prod releases from Artifacts folder Add https://github.com/naz-hage/learn/tree/main/dotnet/cleanup-non-prod project to NbuildTasks.","title":"Changelog"},{"location":"changelog/#version-130-15-feb-24","text":"Fix issue #29 Add default value for -json option Fix specifiying the process start info for ntools-launcher. if StartInfo.FileName uses executable name only that is in the system path, then the StartInfo.FileName witll be replaced with the full pathName. See FileMapping.cs file Add install.ps1 which is equivalent to install.bat. update to ntools-launcher 1.3.0","title":"Version 1.3.0 - 15-feb-24"},{"location":"changelog/#version-120-22-jan-24","text":"Fix issue #27 Update to ntools-launcher 1.2.0 Use $\"{Environment.GetFolderPath(Environment.SpecialFolder.System)}\" for c:\\windows\\system32 When Using ntools-launcher use default Process::StartInfo RedirectStandardOutput = true, RedirectStandardError = true, WindowStyle = ProcessWindowStyle.Hidden, CreateNoWindow = false, UseShellExecute = false,","title":"Version 1.2.0 - 22-jan-24"},{"location":"changelog/#version-120-22-jan-24_1","text":"See issue#5 Add NbuildTask to download and install applications from the web. Add targets to install Git Nodejs VSCode VS2020 Postman Docker Desktop WSL Dotnet Core SDK Dotnet Core Runtime Add -i [list | download | install] and -json option to Nb.exe to download and install applications from the web. Use json input applist.json file to specify the applications to download and install. Sample json file: NbuildAppListTest","title":"Version 1.2.0 - 22-jan-24"},{"location":"changelog/#version-110-05-jan-24","text":"Move Launcher project to its own public repo ntools-launcher . Publish Launcher 1.1.0 to nuget.org and unlist 1.0.0.5 Target .netstandard2.0 project to supprt MS build tasks. MS Build tasks only support .netstandard2.0. Add Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Refactor Launcher tests Introduce Nbuild project to streamline the building process of ntools and other projects, renaming it yo Nb.exe for convenience. Add NbuildTasks project that exposes MS build tasks. Introduce Git Wrapper class to streamline git operations including: Git.GetTag Git.SetTag Git.Autotag Git.PushTag Git.DeleteTag Git.GetBranch Introduce Ngit project to provide a simplified and automated interface for git operations, renaming it to Ng.exe for convenience. Depends on DevDrive and MainDir environment variables. Default values are used if they don't exist. DevDrive defaults to C: and MainDir defaults to C:\\source . Use DevDrive and MainDir from environment variables if they exist. Otherwise, use default values. This applies to common.targets and NbuildTasks. Refactor Nbackup - remove cli options src, dest, and options and use json input only file instead. Update documentation Reference: issue#23","title":"Version 1.1.0 - 05-jan-24"},{"location":"changelog/#next","text":"Delete non-prod releases from Artifacts folder Add https://github.com/naz-hage/learn/tree/main/dotnet/cleanup-non-prod project to NbuildTasks.","title":"Next"},{"location":"installation/","text":"Installation To get started with the NTools repository, follow these steps: Clone this repository to your local machine. Open a command prompt in administrative mode and navigate to the root folder of the repository. Change the PowerShell execution policy to allow the installation script to run. Run the following command: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process This command will allow the installation script to run. Once the installation is complete, the execution policy will revert to its original state. Run the following command to install the tools: install.bat This command will install the Dotnet Core Desktop runtime and download the NTools from GitHub. The tools will be installed in the C:\\Program Files\\Nbuild folder.","title":"Installation"},{"location":"installation/#installation","text":"To get started with the NTools repository, follow these steps: Clone this repository to your local machine. Open a command prompt in administrative mode and navigate to the root folder of the repository. Change the PowerShell execution policy to allow the installation script to run. Run the following command: Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope Process This command will allow the installation script to run. Once the installation is complete, the execution policy will revert to its original state. Run the following command to install the tools: install.bat This command will install the Dotnet Core Desktop runtime and download the NTools from GitHub. The tools will be installed in the C:\\Program Files\\Nbuild folder.","title":"Installation"}]}